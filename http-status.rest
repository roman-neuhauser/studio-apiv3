.. vim: ft=rst sts=2 sw=2 tw=70
.. default-role:: literal

=================
HTTP Status Codes
=================

This document discusses semantics of HTTP status codes and their use
in SUSE Studio APIv3.
Irrelevant status codes are omitted.

201 Created
***********

RFC2616 10.2.2:

   The request has been fulfilled and resulted in a new resource being
   created.
   The newly created resource can be referenced by the URI(s) returned
   in the entity of the response, with the most specific URI for the
   resource given by a Location header field.

   The origin server MUST create the resource before returning the 201
   status code.

  RFC2616, 9.5 POST:

    If a resource has been created on the origin server, the response
    SHOULD be 201 (Created) and contain an entity which describes the
    status of the request and refers to the new resource,
    and a Location header (see section 14.30).

  RFC2616, 9.6 PUT:

    If a new resource is created, the origin server MUST inform the
    user agent via the 201 (Created) response.

202 Accepted
************

RFC2616 10.2.3:

   The request has been accepted for processing, but the processing has
   not been completed.
   The request might or might not eventually be acted upon, as it
   might be disallowed when processing actually takes place.

   The entity returned with this response SHOULD include an indication
   of the request's current status and either a pointer to a status
   monitor or some estimate of when the user can expect the request to
   be fulfilled.

  RFC2616, 9.7 DELETE:

    A successful response SHOULD be [...] 202 (Accepted) if the action
    has not yet been enacted

204 No Content
**************

RFC2616 10.2.5:

   The server has fulfilled the request but does not need to return an
   entity-body, and might want to return updated metainformation.
   The response MAY include new or updated metainformation in the form
   of entity-headers, which if present SHOULD be associated with the
   requested variant.

   The 204 response MUST NOT include a message-body, and thus is
   always terminated by the first empty line after the header fields.

  RFC2616, 9.5 POST:

   The action performed by the POST method might not result in a
   resource that can be identified by a URI. In this case, either
   200 (OK) or 204 (No Content) is the appropriate response status.

  RFC2616, 9.6 PUT:

   If an existing resource is modified, either the 200 (OK) or
   204 (No Content) response codes SHOULD be sent to indicate
   successful completion of the request.

  RFC2616, 9.7 DELETE:

   A successful response SHOULD be [...] 204 (No Content) if the action
   has been enacted but the response does not include an entity.

300 Multiple Choices
********************

RFC2616 10.3.1:

   The requested resource corresponds to any one of a set of
   representations, each with its own specific location, and agent-
   driven negotiation information (section 12) is being provided so
   that the user (or user agent) can select a preferred representation
   and redirect its request to that location.

   If the server has a preferred choice of representation, it SHOULD
   include the specific URI for that representation in the Location
   field; user agents MAY use the Location field value for automatic
   redirection.

301 Moved Permanently
*********************

RFC2616 10.3.2:

   The requested resource has been assigned a new permanent URI and any
   future references to this resource SHOULD use one of the returned
   URIs.

   The new permanent URI SHOULD be given by the Location field in the
   response.

   If the 301 status code is received in response to a request other
   than GET or HEAD, the user agent MUST NOT automatically redirect the
   request unless it can be confirmed by the user, since this might
   change the conditions under which the request was issued.

302 Found
*********

RFC2616 10.3.3:

   The requested resource resides temporarily under a different URI.
   Since the redirection might be altered on occasion, the client SHOULD
   continue to use the Request-URI for future requests.
   This response is only cacheable if indicated by a Cache-Control or
   Expires header field.

   The temporary URI SHOULD be given by the Location field in the
   response.
   Unless the request method was HEAD, the entity of the response
   SHOULD contain a short hypertext note with a hyperlink to the new
   URI(s).

   If the 302 status code is received in response to a request other
   than GET or HEAD, the user agent MUST NOT automatically redirect the
   request unless it can be confirmed by the user, since this might
   change the conditions under which the request was issued.

303 See Other
*************

RFC2616 10.3.4:

   The response to the request can be found under a different URI and
   SHOULD be retrieved using a GET method on that resource.
   This method exists primarily to allow the output of a
   POST-activated script to redirect the user agent to a selected
   resource.
   The new URI is not a substitute reference for the originally
   requested resource.

   The different URI SHOULD be given by the Location field in the
   response.

304 Not Modified
****************

RFC2616 10.3.5:

   If the client has performed a conditional GET request and access is
   allowed, but the document has not been modified, the server SHOULD
   respond with this status code.
   The 304 response MUST NOT contain a message-body, and thus is
   always terminated by the first empty line after the header fields.

307 Temporary Redirect
**********************

RFC2616 10.3.8:

   The requested resource resides temporarily under a different URI.
   Since the redirection MAY be altered on occasion, the client SHOULD
   continue to use the Request-URI for future requests.

   If the 307 status code is received in response to a request other
   than GET or HEAD, the user agent MUST NOT automatically redirect the
   request unless it can be confirmed by the user, since this might
   change the conditions under which the request was issued.


400 Bad Request
***************

RFC2616 10.4.1:

   The request could not be understood by the server due to malformed
   syntax.
   The client SHOULD NOT repeat the request without modifications.

403 Forbidden
*************

RFC2616 10.4.4:

   The server understood the request, but is refusing to fulfill it.
   Authorization will not help and the request SHOULD NOT be repeated.
   If the request method was not HEAD and the server wishes to make
   public why the request has not been fulfilled, it SHOULD describe the
   reason for the refusal in the entity.
   If the server does not wish to make this information available to the
   client, the status code 404 (Not Found) can be used instead.

404 Not Found
*************

RFC2616 10.4.5:

   The server has not found anything matching the Request-URI.

   The 410 (Gone) status code SHOULD be used if the server
   knows, through some internally configurable mechanism, that an old
   resource is permanently unavailable and has no forwarding address.
   This status code is commonly used when the server does not wish to
   reveal exactly why the request has been refused, or when no other
   response is applicable.

405 Method Not Allowed
**********************

RFC2616 10.4.6:

   The method specified in the Request-Line is not allowed for the
   resource identified by the Request-URI.
   The response MUST include an Allow header containing a list of
   valid methods for the requested resource.

406 Not Acceptable
******************

RFC2616 10.4.7:

   The resource identified by the request is only capable of
   generating response entities which have content characteristics not
   acceptable according to the accept headers sent in the request.

409 Conflict
************

RFC2616 10.4.10:

   The request could not be completed due to a conflict with the current
   state of the resource.
   This code is only allowed in situations where it is expected that
   the user might be able to resolve the conflict and resubmit the
   request.
   The response body SHOULD include enough information for the user to
   recognize the source of the conflict.

   For example, if versioning were being used and the entity being PUT
   included changes to a resource which conflict with those made by an
   earlier (third-party) request, the server might use the 409 response
   to indicate that it can't complete the request.
   In this case, the response entity would likely contain a list of
   the differences between the two versions in a format defined by the
   response Content-Type.

410 Gone
********

RFC2616 10.4.11:

   The requested resource is no longer available at the server and no
   forwarding address is known.
   This condition is expected to be considered permanent.

   It is not necessary to mark all permanently unavailable resources
   as "gone" or to keep the mark for any length of time -- that is
   left to the discretion of the server owner.

411 Length Required
*******************

RFC2616 10.4.12:

   The server refuses to accept the request without a defined
   Content-Length.

412 Precondition Failed
***********************

RFC2616 10.4.13:

   This response code allows the client to place preconditions on the
   current resource metainformation (header field data) and thus
   prevent the requested method from being applied to a resource other
   than the one intended.

413 Request Entity Too Large
****************************

RFC2616 10.4.14:

   The server is refusing to process a request because the request
   entity is larger than the server is willing or able to process.

415 Unsupported Media Type
**************************

RFC2616 10.4.16:

   The server is refusing to service the request because the entity of
   the request is in a format not supported by the requested resource
   for the requested method.

